/*Задача 1. Форматтер чисел
Ошибки случаются, и нужно уметь с ними работать. Ваши коллеги разработали форму, которая принимает от пользователя количество покупаемых единиц товара. Вас попросили написать функцию-преобразователь, которая:
=возвращает число, если всё корректно;
=генерирует ошибку, если ввод не является числом в десятичной системе счисления.
Используйте возможности стандартной библиотеки JS для преобразования строки в число.

Что нужно сделать
1) Напишите функцию parseCount .
=Аргументом функции является значение, которое необходимо распарсить.
=Для парсинга используйте функцию Number.parseFloat.

Функция parseFloat преобразует строку в число с плавающей точкой. Это нужно для значений типа '12.5px' - когда вначале стоит число, а потом единицы измерения. Если применить функцию parseFloat к '12.5px' , то результатом получится число 12.5 (и это будет действительно число, а не строка).

=Если результат парсинга — значение NaN, то выбрасывайте исключение с ошибкой «Невалидное значение».
=Верните результат парсинга из функции.

2) Напишите функцию validateCount.
=Аргументом функции является значение, которое необходимо распарсить.
=Попробуйте распарсить значение с помощью функции parseCount.
=Если распарсить удаётся успешно, то возвращайте результат.
=Перехватывайте исключение, которое может выбрасывать функция parseCount.
=Возвращайте ошибку из функции в случае перехвата исключения.*/

function parseCount(element){
  const result = Number.parseFloat(element);
  if (isNaN(result)) {
    throw new Error ("Невалидное значение");
  } return result;
}

function validateCount(element){
  try{
    return parseCount(element); 
  } catch (error) {
    return error;
  }
}

/*Задача 2. Треугольник
На этот раз Вася решил создать онлайн-калькулятор геометрических фигур. Помогите ему создать калькулятор треугольников, который сможет проверять существование треугольника, считать площадь и периметр.

Что нужно сделать
1) Напишите класс Triangle.
=Конструктор класса должен принимать три стороны треугольника.
=В случае нарушения правила существования треугольника (сумма двух сторон меньше третьей) выбрасывайте исключение с ошибкой «Треугольник с такими сторонами не существует».
=Геттер perimeter должен возвращать периметр треугольника.
=Геттер area должен возвращать площадь треугольника. Для подсчёта площади используйте формулу Герона. Точность должна вычисляться с обозначением до трёх знаков после запятой.
2) Напишите функцию getTriangle.
=Аргументами функции являются три значения длин сторон.
=Попытайтесь вернуть новый объект треугольника.
=В случае перехвата исключения возвращайте объект с двумя геттерами area и perimeter, которые возвращают строку: «Ошибка! Треугольник не существует».*/

class Triangle {
  constructor(a,b,c) {
    this.a=a;
    this.b=b;
    this.c=c;  
    
    if (a + b < c || b + c < a || a + c < b) {
      throw new Error("Треугольник с такими сторонами не существует");
    }
}
get perimeter () {
  return this.a + this.b + this.c;
}
get area () {
  let p = (this.a + this.b + this.c) / 2;
  let area = Math.sqrt(p * (p - this.a) * (p - this.b) * (p - this.c));
  return Number(area.toFixed(3));
  }
}

function getTriangle (a, b, c){
  try{
    return new Triangle (a, b, c); 
  } catch (error) {
    return {
    get perimeter() {return 'Ошибка! Треугольник не существует';},
    get area () {return 'Ошибка! Треугольник не существует';},
    }; 
  }
}
 